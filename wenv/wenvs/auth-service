#!/bin/zsh

wenv_def() {
    WENV_DIR="/home/grish/.go/src/gitlab.com/health-in-motion/auth_service"
    WENV_DEPS=()
    WENV_PROJECT=''
    WENV_TASK=''

    startup_wenv() {
        sudo systemctl start postgresql
        tmux rename-window src
        wenv_tmux_split -n db window 'c db; clear'
        wenv_tmux_split -n run window
        tmux select-window -t src
    }
    shutdown_wenv() {
        sudo systemctl stop postgresql
    }
    bootstrap_wenv() {}
}

declare -Ag wenv_dirs=(
    ['db']="$HOME/src/auth-service-db"
)
declare -Ag wenv_files=(
    ['db']="${wenv_dirs[db]}/users.sql"
    ['notes']="$HOME/src/inspire/ecommerce/notes.md"
)
declare -Ag wenv_vars=(
    ['db']='users'
)

db() {
    [[ -z "$1" ]] && { echo "error: input subcommand" ; return 1 }
    local cmd="$1"
    local db="${wenv_vars[db]}"
    shift
    case "$cmd" in
        open)
            psql -U postgres -d "$db"
            ;;
        cmd)
            psql -U postgres -a -f <(echo "$@")
            ;;
        query)
            psql -U postgres -d "$db" -a -f <(echo "$@")
            ;;
        run)
            [[ -z "$1" ]] && { echo "error: requires filename input"; return 1 }
            fname="$1"
            psql -U postgres -d "$db" -f "$fname"
            ;;
        reset)
            db cmd "DROP DATABASE IF EXISTS $db"
            db cmd "CREATE DATABASE $db"
            db run "${wenv_files[db]}"
            ;;
    esac
}
_db() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if (( COMP_CWORD == 1 )) && [[ ${word} == -* ]]; then
        COMPREPLY=( $(compgen -W "-r" -- ${word}) )
    elif (( COMP_CWORD == 1 )) || { ((COMP_CWORD == 2 )) && [[ ${prev} == -* ]]; }; then
        local opts="open cmd query run reset"
        COMPREPLY=( $(compgen -W "${opts}" -- ${word}) )
    fi
}
complete -F _db db

c() {
    local flag_r=0
    local wname=""
    while getopts ":rn:" opt; do
        case $opt in
            r)
                flag_r=1
                ;;
            n)
                wname="$OPTARG"
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                ;;
        esac
    done
    shift $((OPTIND-1))

    local input="$1"
    shift

    [ "${wenv_dirs[$input]+0}" ] || { echo "no entry '$input'" >&2 ; return 1 }
    dir="${wenv_dirs[$input]}"
    (( flag_r == 1 )) && wname="$input"

    local abs
    if [[ $dir != /* ]]; then
        abs=$(realpath --relative-to=. "$WENV_DIR/$dir")
    else
        abs=$dir
    fi
    cd "$abs"

    [[ ! -z "$wname" ]] && tmux rename-window "$wname"
}
_c() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if (( COMP_CWORD == 1 )) && [[ ${word} == -* ]]; then
        COMPREPLY=( $(compgen -W "-r" -- ${word}) )
    elif (( COMP_CWORD == 1 )) || { ((COMP_CWORD == 2 )) && [[ ${prev} == -* ]]; }; then
        local opts="${(k)wenv_dirs[@]}"
        COMPREPLY=( $(compgen -W "${opts}" -- ${word}) )
    fi
}
complete -F _c c

edit() {
    local flag_r=0
    local wname=""
    local opts=""
    while getopts ":rn:o:" opt; do
        case $opt in
            r)
                flag_r=1
                ;;
            n)
                wname="$OPTARG"
                ;;
            o)
                opts="$OPTARG"
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                ;;
        esac
    done
    shift $((OPTIND-1))

    local files=()
    for arg in $@; do
        [ "${wenv_files[$arg]+0}" ] || { echo "no entry '$arg'" >&2 ; return 1 }
        files+="${wenv_files[$arg]}"
    done
    (( flag_r == 1 )) && wname="$1"

    local abs=()
    for file in $files; do
        if [[ $file != /* ]]; then
            abs+=($(realpath --relative-to=. "$WENV_DIR/$file"))
        else
            abs+=($file)
        fi
    done

    [[ ! -z "$wname" ]] && tmux rename-window "$wname"
    eval "$EDITOR $opts $abs"
}
_edit() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if [[ ${word} == -* ]]; then
        COMPREPLY=($(compgen -W "-r -n -o" -- ${word}))
    else
        local opts="${(k)wenv_files[@]}"
        COMPREPLY=($(compgen -W "${opts}" -- ${word}))
    fi
}
complete -F _edit edit
