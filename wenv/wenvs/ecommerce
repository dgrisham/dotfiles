#!/bin/zsh

wenv_def() {
    WENV_DIR="$SRC/inspire/ecommerce"
    WENV_DEPS=()
    WENV_PROJECT=''
    WENV_TASK=''

    startup_wenv() {
        tmux rename-window src
        cd src
        wenv_tmux_layout dev 'yarn watch'
        wenv_tmux_split -n db window 'c db; clear'
        tmux select-window -t src
        edit login-view
    }
    shutdown_wenv() {}
    bootstrap_wenv() {
        [[ -z "$SRC" ]] && { echo "SRC env var not defined"; return 1 }
        mkdir -p "$WENV_DIR"
        git clone git@gitlab.com:health-in-motion/ecommerce.git "$WENV_DIR"
        cd "$WENV_DIR"
        yarn
        echo "NOTE: The following steps must be performed manually:"
        echo "-    Get .env file and put it in wenv root"
        echo "-    Generate the database needed for testing"
    }
}

export PATH="$PATH:$WENV_DIR/node_modules/.bin"

declare -Ag wenv_dirs=(
    ['db']='../db-files'
)
declare -Ag wenv_files=(
    ['db']="${wenv_dirs[db]}/rcomm_inspire_04_12_19.sql"
    ['login-view']='src/client/modules/user/components/LoginView.web.jsx'
)

db() {
    [[ -z "$1" ]] && return 1
    case "$1" in
        reset)
            sudo su postgres -c "psql -f ${wenv_files[db]}"
            ;;
        open)
            sudo su postgres -c 'psql inspire_rcomm'
            ;;
    esac
}
_db() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if (( COMP_CWORD == 1 )) && [[ ${word} == -* ]]; then
        COMPREPLY=( $(compgen -W "-r" -- ${word}) )
    elif (( COMP_CWORD == 1 )) || { ((COMP_CWORD == 2 )) && [[ ${prev} == -* ]]; }; then
        local opts="open reset"
        COMPREPLY=( $(compgen -W "${opts}" -- ${word}) )
    fi
}
complete -F _db db

c() {
    local flag_r=0
    local wname=""
    while getopts ":rn:" opt; do
        case $opt in
            r)
                flag_r=1
                ;;
            n)
                wname="$OPTARG"
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                ;;
        esac
    done
    shift $((OPTIND-1))

    local input="$1"
    shift

    [ "${wenv_dirs[$input]+0}" ] || { echo "no entry '$input'" >&2 ; return 1 }
    dir="${wenv_dirs[$input]}"
    (( flag_r == 1 )) && wname="$input"

    local abs
    if [[ $dir != /* ]]; then
        abs=$(realpath --relative-to=. "$WENV_DIR/$dir")
    else
        abs=$dir
    fi
    cd "$abs"

    [[ ! -z "$wname" ]] && tmux rename-window "$wname"
}
_c() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if (( COMP_CWORD == 1 )) && [[ ${word} == -* ]]; then
        COMPREPLY=( $(compgen -W "-r" -- ${word}) )
    elif (( COMP_CWORD == 1 )) || { ((COMP_CWORD == 2 )) && [[ ${prev} == -* ]]; }; then
        local opts="${(k)wenv_dirs[@]}"
        COMPREPLY=( $(compgen -W "${opts}" -- ${word}) )
    fi
}
complete -F _c c

edit() {
    local flag_r=0
    local wname=""
    local opts=""
    while getopts ":rn:o:" opt; do
        case $opt in
            r)
                flag_r=1
                ;;
            n)
                wname="$OPTARG"
                ;;
            o)
                opts="$OPTARG"
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                ;;
        esac
    done
    shift $((OPTIND-1))

    local files=()
    for arg in $@; do
        [ "${wenv_files[$arg]+0}" ] || { echo "no entry '$arg'" >&2 ; return 1 }
        files+="${wenv_files[$arg]}"
    done
    (( flag_r == 1 )) && wname="$1"

    local abs=()
    for file in $files; do
        if [[ $file != /* ]]; then
            abs+=($(realpath --relative-to=. "$WENV_DIR/$file"))
        else
            abs+=($file)
        fi
    done

    [[ ! -z "$wname" ]] && tmux rename-window "$wname"
    eval "$EDITOR $opts $abs"
}
_edit() {
    COMPREPLY=()
    complete +o default

    local word="${COMP_WORDS[COMP_CWORD]}"
    local prev="${COMP_WORDS[COMP_CWORD-1]}"

    if [[ ${word} == -* ]]; then
        COMPREPLY=($(compgen -W "-r -n -o" -- ${word}))
    else
        local opts="${(k)wenv_files[@]}"
        COMPREPLY=($(compgen -W "${opts}" -- ${word}))
    fi
}
complete -F _edit edit
