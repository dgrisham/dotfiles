#!/bin/zsh

# list
# ----
alias ll="ls -lh"
alias lr="ls -lrh"
alias la="ls -lah"
alias lt="ls -lrth"
alias lta="ls -lrtah"
alias lat="ls -lrtah"

# tmux
# ----
alias tm="tmux -2 attach"

alias kak='kak_session'

# convenient cd
# -------------
chpwd() { ll }            # cd and ls
mc() { mv $@ && ${(P)#} } # mv and cd
cc() { cp $@ && ${(P)#} } # cp and cd

# compression
# -----------
alias tarx='tar -xvf'
tarc() { tar -cvf $1.tar $1 }
zipd() { zip -rv $1.zip $1 }

# curl with status code
# ---------------------
alias scurl='curl -w "%{http_code}"'

# beet ipfs
# ---------

publish_library() {
    local topic='grish-work-library'
    local library_hash=$(beet ipfs --publish 2>&1 | ag -o '(?<=ipfs: hash of library: )Qm.*?$')
    [[ -z "$library_hash" ]] && { echo "failed to publish beet library to ipfs" ; return 1 ; }
    ipfs pubsub pub $topic $library_hash
}

# alias publish_library='ipfs name publish /ipfs/$(beet ipfs --publish 2>&1 | ag --nocolor -o "(?<=ipfs: hash of library: )Qm.*?$")'
alias fetch_library='beet ipfs --import $(ipfs name resolve /ipns/QmPDZYSLVUiFWHztvFPXRmvaVZp217kL1hgZ35jEyXqNj6 | sed "s|/ipfs/||")'

ipfs_connect() {
    port="$1"
    [[ -z "$port" ]] && { echo "port required" >&2 ; return 1 ; }
    ipfs swarm connect "/ip4/73.3.139.32/tcp/$port/p2p/QmPDZYSLVUiFWHztvFPXRmvaVZp217kL1hgZ35jEyXqNj6"
}

subscribe_to_library() {
    local topic='grish-desktop-library'
    [[ -n "$1" ]] && topic="$1"
    echo "subscribing to topic '$topic'"

    ipfs pubsub sub --encoding json $topic \
    | jq --raw-output --unbuffered ".data" \
    | while read data; do
        libHash=$(base64 --decode <<<$data)
        echo "importing library $libHash as $topic"
        rm -f "$DOTFILES/beets/remotes/*.db"
        beet ipfs --import $libHash $topic
        echo "finished importing library $libHash"
    done
}

alias fetch_lib='beet ipfs --import $(ipfs resolve /ipns/QmZRbzaoPehexUKDwxDzfYZGANaLM3w3gvPCv5Z6PfVwGp | sed "s|/ipfs/||")'
#ipfs pubsub sub --encoding json testing | jq --raw-output --unbuffered '.data' | while read f; do libHash=$(base64 --decode <<<$f); echo "importing library $libHash"; beet ipfs --import $libHash; done

beet_import_ipfs() {
    beet import "$@" && beet ipfs --add
}
alias bii=beet_import_ipfs

ipfs_local_stat() {
    ipfs files stat --with-local /ipfs/$1 | ag --nocolor 'Qm*|Local'
}
alias ils=ipfs_local_stat

beet_ipfs_list() {
    local hash=$(beet ipfs --list | sk | ag -o 'Qm.*?$')
    [[ -z $hash ]] && return $?
    beet ipfs --get $hash
}
alias skeet=beet_ipfs_list

loop() {
    local time=1
    while getopts ":t:h" opt; do
        case $opt in
            t)
                time="$OPTARG"
                ;;
        esac
    done
    shift $((OPTIND-1))
    while sleep "$time"; do clear; $@; done
}

alias lils='loop -t 1 ipfs_local_stat'

# music
# -----

cava() {
    mpd_watch.sh '{ mnuc2 ; dynamic_cava_colors 5 ; }' &
    local pid=$!
    /usr/local/bin/cava
    kill $pid
}

alias apv='mpv --vid=no'

# Shortcuts
# =========

becho() { echo '\033[0;36m'$@'\033[0m' }
gecho() { echo '\033[0;32m'$@'\033[0m' }
recho() { echo '\033[0;31m'$@'\033[0m' }

# open pdf as plaintext
# ---------------------
tdf() {
    lesspipe.sh "$1" | less
}

# `$EDITOR <today's_date>.md`
# -----------------------
edit_today() {
    local format='%Y-%m-%d'
    $EDITOR "`date +$format`.md"
}
alias et='edit_today'

edit_week() {
    local format='%Y-%m-%d'
    local which_monday='last-monday'
    [[ $(date +%a) == 'Mon' ]] && which_monday='this-monday'
    $EDITOR "`date -d$which_monday +$format`.md"
}
alias ew='edit_week'

# 'journal today'
# ---------------
jt() {
    local format='%Y-%m-%d'
    local journal_dir="$PERSONAL/routine/morning/journal/five_minute_journal"
    cp -n "$journal_dir/template.md" "$journal_dir/`date +$format`.md"
    cd "$journal_dir"
    kt
}

# copy etc
# --------
cp_etc() {
    local dir="$1"
    [[ ! -d "$DOTFILES/etc/$dir" ]] && return 1
    for file in $(find "$DOTFILES/etc/$dir" -type f); do
        sudo cp "$file" "${file#$DOTFILES}"
    done
}

# git
# ---

alias gc='git commit -m'
alias gcm='git commit -m'
alias gca='git commit -a'
alias gcam='git commit -am'
alias gs='git status'
alias gl="git log --pretty=format:'%C(auto)%h %ad %C(green)%s%Creset %C(auto)%d [%an]' --graph --date=format:'%Y-%m-%d %H:%M' --all"
alias gde="git diff --name-only --diff-filter=U | uniq  | xargs $EDITOR"
alias gco='git checkout'
alias gbr='git for-each-ref --sort=-committerdate refs/heads/ --format="%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:red)%(objectname:short)%(color:reset) - %(contents:subject) - %(authorname) (%(color:green)%(committerdate:relative)%(color:reset))"'

gb() {
    git blame $@ | while read hash user date time tz lineno line; do
        gecho "\n$hash $user $date $time $tz $lineno"
        echo "$line"
        becho "$(git log -1 --pretty=%s $hash)"
    done
}

# Don't forget
# ------------

# cuesplit && cd split && for f in *.flac; do ffmpeg -i $f -ab 320k -map_metadata 0 -id3v2_version 3 "${f%.*}.mp3"; done && mkdir mp3 && mv *.mp3 mp3

# sk + ag
# =======

# ag default options
alias ag="ag --color-path='1;36' --color-line-number='0;37' --color-match='1;33' --ignore node_modules --ignore git"

# sk + ag to interactively search files
skag() {
    local extensions
    local ag_args
    (($# != 0)) && { extensions="$(tr ' ' '|' <<<($@))"; ag_args=('-G' "'.*?$extensions'") }
    sk -m --ansi -i -c 'ag '"$ag_args"' --color "{}"'
}

# open skag() result in kak
skak() {
    while getopts ":h" opt; do
        case "$opt" in
            h)
                echo "usage: skak [-h]"
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    local target=$(skag $@ | perl -pe 's/^(.*?):(\d+):\s*.*?$/\1 +\2/')
    [[ -z "$target" ]] && return 1
    eval $EDITOR $target
}
# alias skaf='skak -f'

skaf() {
    while getopts ":h:" opt; do
        case "$opt" in
            h)
                echo "usage: skaf [-h] "
                return 0
                ;;
            \?)
                echo "unknown option: -$OPTARG" >&2
                return 1
                ;;
        esac
    done
    shift $((OPTIND-1))

    local target=$(sk)
    [[ -z "$target" ]] && return 1
    if [[ -f $target ]]; then
        $EDITOR $target
    else [[ -d $target ]]
        cd $target
    fi
}

# ncmpcpp
# =======
# ncmpcpp() {
    # start mpd if not already running
    # [[ ! -f "$DOTFILES/mpd/pid" ]] && mpd
    # /bin/ncmpcpp
# }
